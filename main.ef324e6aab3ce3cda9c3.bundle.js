(self.webpackChunkreact_lt=self.webpackChunkreact_lt||[]).push([[179],{2953:(e,n,t)=>{"use strict";t.r(n),t.d(n,{slides:()=>u,backgrounds:()=>p,fragmentSteps:()=>s,fusumaProps:()=>o,default:()=>i});var l=t(7401),r=t(9332);t(108),t(4819),t(6066),t(1687),t(230),t(8366),t(6757);function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var l in t)Object.prototype.hasOwnProperty.call(t,l)&&(e[l]=t[l])}return e}).apply(this,arguments)}const u=[e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h1",null,"React の Ref とフォーカス管理におけるベストプラクティス"),(0,r.kt)("p",null,"株式会社 kikitori CTO"),(0,r.kt)("p",null,"永谷 龍彦"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/chelproc/20210715-coral-react-lt"},"リポジトリ")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"samples"},"サンプル"))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"自己紹介"),(0,r.kt)("div",{className:"grid"},(0,r.kt)("div",{className:"column"},(0,r.kt)("p",null,(0,r.kt)("img",{src:t(9502),alt:"自己紹介"}))),(0,r.kt)("div",{className:"column"},(0,r.kt)("p",null,"東京大学工学部システム創生学科環境・エネルギーシステム専攻。"),(0,r.kt)("p",null,"10 歳からプログラミングをスタート。14 歳で学内向け学習 Q&A サービスを開発。2018 年よりフリーランスとして活動を開始。フロントからバックエンドまで多様な言語を扱うフルスタックエンジニア。"),(0,r.kt)("p",null,"2019 年に株式会社 kikitori に参画。")))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"Ref とは"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Ref は render メソッドで作成された DOM ノードもしくは React の要素にアクセスする方法を提供します。"),(0,r.kt)("p",{parentName:"blockquote"},"-- ",(0,r.kt)("a",{parentName:"p",href:"https://ja.reactjs.org/docs/refs-and-the-dom.html"},"https://ja.reactjs.org/docs/refs-and-the-dom.html")))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"基本的な使い方"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useRef")," の戻り値を ",(0,r.kt)("inlineCode",{parentName:"p"},"ref")," 属性に渡すと ",(0,r.kt)("inlineCode",{parentName:"p"},"current")," フィールドに DOM オブジェクトが入る。",(0,r.kt)("a",{parentName:"p",href:"samples/sample01"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export default function Sample1() {\n  const ref = useRef<HTMLInputElement>(null);\n\n  return (\n    <>\n      <input ref={ref} />\n      <button\n        onClick={() => {\n          ref.current?.focus();\n        }}\n      >\n        focus\n      </button>\n    </>\n  );\n}\n"))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"Ref の歴史"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("del",{parentName:"li"},"String Refs")," (たぶん初期からある)"),(0,r.kt)("li",{parentName:"ul"},"Callback Ref (v0.13.0 / 2015 年)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"String Refs より柔軟に Ref が扱えるようになった。"))),(0,r.kt)("li",{parentName:"ul"},"Ref オブジェクト (v16.3.0 / 2018 年)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Callback Ref よりも開発者にとって使いやすいインターフェースを目指して開発された。"))))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"Class Component 時代の Ref (1)"),(0,r.kt)("p",null,"Class Component 時代の Ref: クラスコンポーネントのインスタンスを取得するための仕組み。",(0,r.kt)("a",{parentName:"p",href:"samples/sample02"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"class Child extends Component {\n  render() {\n    return <div>Hello World</div>;\n  }\n}\n\nexport default class Sample02 extends Component {\n  divRef = createRef<HTMLDivElement>();\n  divElement: HTMLDivElement | null = null;\n  childRef = createRef<Child>();\n\n  render() {\n    return (\n      <>\n        {/* Ref オブジェクトを使う場合 */}\n        <div ref={this.divRef} />\n        {/* Callback Ref を使う場合 */}\n        <div\n          ref={(element) => {\n            this.divElement = element;\n          }}\n        />\n        <Child ref={this.childRef} />\n      </>\n    );\n  }\n}\n")),(0,r.kt)("p",null,"対象が DOM 要素であれば DOM オブジェクトが、カスタムコンポーネントであればそのインスタンスが取得できる")),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"Class Component 時代の Ref (2)"),(0,r.kt)("p",null,"子コンポーネントのメソッドが呼び出せたりする。",(0,r.kt)("a",{parentName:"p",href:"samples/sample03"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"class Child extends Component<{}, { count: number }> {\n  state = { count: 1 };\n\n  increment() {\n    this.setState((state) => ({ count: state.count + 1 }));\n  }\n\n  render() {\n    return <div>{this.state.count}</div>;\n  }\n}\n\nexport default class Sample03 extends Component {\n  ref = createRef<Child>();\n\n  render() {\n    return (\n      <>\n        <Child ref={this.ref} />\n        <button\n          onClick={() => {\n            this.ref.current?.increment();\n          }}\n        >\n          increment\n        </button>\n      </>\n    );\n  }\n}\n"))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"Hooks 以降の Ref (1)"),(0,r.kt)("p",null,"インスタンスが存在しないため、Ref を取得できない。",(0,r.kt)("a",{parentName:"p",href:"samples/sample04"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function Child() {\n  return <div>Child</div>;\n}\n\nexport default function Sample04() {\n  const ref = useRef<any>(null);\n\n  // @ts-expect-error Property 'ref' does not exist on type 'IntrinsicAttributes'.\n  return <Child ref={ref} />;\n}\n"))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"Hooks 以降の Ref (2)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"forwardRef")," を使うと function component でも ref を公開できる。",(0,r.kt)("a",{parentName:"p",href:"samples/sample05"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const Child = forwardRef<HTMLInputElement>(function Child(_, ref) {\n  return <input ref={ref} />;\n});\n\nexport default function Sample05() {\n  const ref = useRef<HTMLInputElement>(null);\n\n  return (\n    <>\n      <Child ref={ref} />\n      <button\n        onClick={() => {\n          ref.current?.focus();\n        }}\n      >\n        focus\n      </button>\n    </>\n  );\n}\n"))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"Hooks 以降の Ref (3)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ref")," という属性名にこだわらなければ別に ",(0,r.kt)("inlineCode",{parentName:"p"},"forwardRef")," を使う必要はない。",(0,r.kt)("a",{parentName:"p",href:"samples/sample06"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function Child(props: { innerRef: Ref<HTMLInputElement> }) {\n  return <input ref={props.innerRef} />;\n}\n\nexport default function Sample06() {\n  const ref = useRef<HTMLInputElement>(null);\n\n  return (\n    <>\n      <Child innerRef={ref} />\n      <button\n        onClick={() => {\n          ref.current?.click();\n        }}\n      />\n    </>\n  );\n}\n")),(0,r.kt)("p",null,"HoC を作る時やライブラリ作成者が Class Component → Functional Component に移行する際に便利。")),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"Hooks 以降の Ref (4)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useImperativeHandle"),"を用いることで自由な値を ref に設定できる。以下の例では、単純な関数を Ref として使用している。",(0,r.kt)("a",{parentName:"p",href:"samples/sample07"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type ChildRef = () => void;\n\nconst Child = forwardRef<ChildRef>(function Child(_, ref) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useImperativeHandle(ref, () => () => {\n    inputRef.current?.focus();\n  });\n\n  return <input ref={inputRef} />;\n});\n\nexport default function Sample07() {\n  const ref = useRef<ChildRef>(null);\n\n  return (\n    <>\n      <Child ref={ref} />\n      <button\n        onClick={() => {\n          ref.current?.();\n        }}\n      >\n        focus\n      </button>\n    </>\n  );\n}\n"))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"useEffect を用いた useImperativeHandle の再実装"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"samples/sample08"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useEffect(() => {\n  const refValue = () => {\n    inputRef.current?.focus();\n  };\n\n  // Callback Refの場合\n  if (typeof ref === "function") {\n    ref(refValue);\n    return () => {\n      ref(null);\n    };\n  }\n\n  // Ref オブジェクトの場合\n  if (ref) {\n    ref.current = refValue;\n    return () => {\n      ref.current = null;\n    };\n  }\n});\n')),(0,r.kt)("p",null,"（少なくとも）コンポーネントのマウント時とアンマウント時に親から渡された Ref の値を設定すればよい。"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useImperativeHandle"),"を使うことで、Ref オブジェクトと Callback Ref の差異を吸収できる。")),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"Hooks 後の Ref のユースケース"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DOM にアクセスする ← 今まで扱ってきた"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Class Component のインスタンス変数の代わり"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"ミュータブル"),(0,r.kt)("li",{parentName:"ul"},"変更しても再レンダリングされない"))))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"Ref の DOM 以外のユースケース (1)"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/streamich/react-use"},"react-use"),"の",(0,r.kt)("a",{parentName:"p",href:"https://github.com/streamich/react-use/blob/master/src/useMountedState.ts"},"useMountedState")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export default function useMountedState(): () => boolean {\n  const mountedRef = useRef<boolean>(false);\n  const get = useCallback(() => mountedRef.current, []);\n\n  useEffect(() => {\n    mountedRef.current = true;\n\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  return get;\n}\n")),(0,r.kt)("p",null,"コンポーネントが破棄された後もアクセスする可能性があるため、Ref オブジェクトの中にマウント状態を格納している")),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"Ref の DOM 以外のユースケース (2)"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/reduxjs/react-redux"},"react-redux"),"の",(0,r.kt)("a",{parentName:"p",href:"https://github.com/reduxjs/react-redux/blob/master/src/hooks/useSelector.js"},"useSelector")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function useSelectorWithStoreAndSubscription(selector, equalityFn, store) {\n  const latestSelector = useRef();\n  const latestStoreState = useRef();\n  const latestSelectedState = useRef();\n\n  let selectedState;\n  if (\n    selector !== latestSelector.current ||\n    storeState !== latestStoreState.current\n  ) {\n    const newSelectedState = selector(storeState);\n    if (!equalityFn(newSelectedState, latestSelectedState.current))\n      selectedState = newSelectedState;\n    else selectedState = latestSelectedState.current;\n  } else {\n    selectedState = latestSelectedState.current;\n  }\n  return selectedState;\n}\n")),(0,r.kt)("p",null,"無用な再レンダリングを発生させないように、",(0,r.kt)("inlineCode",{parentName:"p"},"selector")," の結果を Ref に保存しておく。")),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"突然ですが弊社の紹介です"),(0,r.kt)("div",{className:"grid"},(0,r.kt)("div",{className:"column"},(0,r.kt)("p",null,(0,r.kt)("img",{src:t(5927),alt:"nimaru"})),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(3710),alt:"kikitori"}))),(0,r.kt)("div",{className:"column"},(0,r.kt)("p",null,"弊社 ",(0,r.kt)("a",{parentName:"p",href:"https://kikitori.jp/"},"kikitori")," は、農産物の流通現場向け SaaS「",(0,r.kt)("a",{parentName:"p",href:"https://nimaru.jp/"},"nimaru"),"」を通して、農業流通全体の DX に取り組んでいます。"),(0,r.kt)("p",null,"全国の卸売市場や JA にてご利用いただいています。")))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"業務システム開発にて"),(0,r.kt)("p",null,"弊社のプロダクトの 1 つである nimaru JA は業務システム的な側面が強い"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(5622),alt:"nimaru JAスクリーンショット"})),(0,r.kt)("p",null,"「Enter キーでカーソル移動したい」という要望が来たら？？")),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"課題"),(0,r.kt)("p",null,"Ref で複数の DOM をどう扱うか 🤔")),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("p",null,"なんか Ref をゴニョゴニョするライブラリがあったような"),(0,r.kt)("p",null,(0,r.kt)("img",{src:"https://raw.githubusercontent.com/react-hook-form/react-hook-form/master/docs/logo.png",alt:"React Hook Form"}))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"React Hook Form"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"register")," の戻り値には ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref")," が含まれる。"),(0,r.kt)("p",null,"敢えて ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," 属性を使わず ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," を非制御のままにしておくことで、パフォーマンスを改善した。",(0,r.kt)("a",{parentName:"p",href:"samples/sample09"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'type FormValue = {\n  name: string;\n};\n\nexport default function Sample09() {\n  const { register, handleSubmit } = useForm<FormValue>();\n\n  return (\n    <form\n      onSubmit={handleSubmit((e) => {\n        alert(e.name);\n      })}\n    >\n      <input {...register("name")} />\n      <input type="submit" />\n    </form>\n  );\n}\n')),(0,r.kt)("p",null,"ちなみに v6 では ",(0,r.kt)("inlineCode",{parentName:"p"},"ref={register()}")," とやっていたので v7 の API では背徳感が薄くなった（？）")),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"React Hook Form の動作原理"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"register")," は ",(0,r.kt)("inlineCode",{parentName:"li"},"{ onChange(), ref }")," の形のオブジェクトを返す",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"使う側はスプレッド構文で展開するだけで使える"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ref")," は Callback Ref"),(0,r.kt)("li",{parentName:"ul"},"Callback Ref 内で",(0,r.kt)("strong",{parentName:"li"},"連想配列"),"の Ref オブジェクトに ref を保存する")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function useForm() {\n  const ref = useRef<Record<string, HTMLInputElement>>({});\n  const register = (name: string) => ({\n    onChange() {},\n    ref(element: HTMLInputElement | null) {\n      ref.current[name] = element;\n    },\n  });\n  return { register };\n}\n")),(0,r.kt)("p",null,"この仕組みは使えそうだ！！")),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"フォーカス管理の Hook の方針"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"useRef")," の中で ",(0,r.kt)("inlineCode",{parentName:"li"},"Map<number, HTMLInputElement>")," を管理する"),(0,r.kt)("li",{parentName:"ul"},"Hook の戻り値は ",(0,r.kt)("inlineCode",{parentName:"li"},"register")," 関数で、フォーカスの順番を引数に指定すると ",(0,r.kt)("inlineCode",{parentName:"li"},"{ onKeyDown(), ref }")," なオブジェクトを返す"),(0,r.kt)("li",{parentName:"ul"},"使う側はスプレッド構文で展開するだけ"))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"結果"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"samples/sample10"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'function useEnterKeyFocusControl() {\n  const ref = useRef(new Map<number, HTMLInputElement>());\n  return (index: number) => ({\n    onKeyDown({ key }: { key: string }) {\n      if (key !== "Enter") return;\n      const sortedIndices = [...ref.current.keys()].sort();\n      const nextIndex = sortedIndices[sortedIndices.indexOf(index) + 1];\n      if (typeof nextIndex === "number") ref.current.get(nextIndex)?.focus();\n    },\n    ref(element: HTMLInputElement | null) {\n      if (element) ref.current.set(index, element);\n      else ref.current.delete(index);\n    },\n  });\n}\n'))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"こんなに簡単に書けるようになりました"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export default function Sample10() {\n  const register = useEnterKeyFocusControl();\n  return (\n    <>\n      {[...Array(10).keys()].map((i) => (\n        <input key={i} {...register(i)} />\n      ))}\n    </>\n  );\n}\n"))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"まとめ"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Hooks 時代の Ref の用途",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"DOM へのアクセス"),(0,r.kt)("li",{parentName:"ul"},"ミュータブルな値を、レンダリングから独立して管理する"))),(0,r.kt)("li",{parentName:"ul"},"useRef で得られるのは Ref オブジェクトだが、Callback Ref を組み合わせて使うとより柔軟に制御できる"),(0,r.kt)("li",{parentName:"ul"},"「Callback Ref を生成する関数」を返す Custom Hook を作ると複数要素の Ref を高い抽象度で扱える"))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("h2",null,"再び宣伝"),(0,r.kt)("div",{className:"grid"},(0,r.kt)("div",{className:"column"},(0,r.kt)("p",null,"弊社 ",(0,r.kt)("a",{parentName:"p",href:"https://kikitori.jp/"},"kikitori"),"は、国内農業流通の ",(0,r.kt)("strong",{parentName:"p"},"8 割")," を占める ",(0,r.kt)("strong",{parentName:"p"},"市場流通")," の DX に取り組んでいます。"),(0,r.kt)("p",null,"私たちと日本の農業を未来をつくるプロダクトを開発しませんか？"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(4658),alt:"農業流通図"}))),(0,r.kt)("div",{className:"column"},(0,r.kt)("div",{className:"left"},(0,r.kt)("h4",null,"技術スタック"),(0,r.kt)("h5",null,"フロントエンド"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"TypeScript"),(0,r.kt)("li",{parentName:"ul"},"React"),(0,r.kt)("li",{parentName:"ul"},"Apollo"),(0,r.kt)("li",{parentName:"ul"},"Material-UI")),(0,r.kt)("h5",null,"バックエンド"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"NestJS"),(0,r.kt)("li",{parentName:"ul"},"Apollo")),(0,r.kt)("h5",null,"インフラ"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"ECS"),(0,r.kt)("li",{parentName:"ul"},"Aurora PostgreSQL"),(0,r.kt)("li",{parentName:"ul"},"Firebase Hosting"),(0,r.kt)("li",{parentName:"ul"},"AWS CDK (IaC)")))))),e=>(0,r.kt)(l.Fragment,null,(0,r.kt)("p",null,"ありがとうございました 🙇‍♂️"))],p=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],s=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],o=[{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{}],k={};function i({components:e,...n}){return(0,r.kt)("wrapper",a({},k,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"React の Ref とフォーカス管理におけるベストプラクティス"),(0,r.kt)("p",null,"株式会社 kikitori CTO"),(0,r.kt)("p",null,"永谷 龍彦"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/chelproc/20210715-coral-react-lt"},"リポジトリ")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"samples"},"サンプル")),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"自己紹介"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(9502),alt:"自己紹介"})),(0,r.kt)("p",null,"東京大学工学部システム創生学科環境・エネルギーシステム専攻。"),(0,r.kt)("p",null,"10 歳からプログラミングをスタート。14 歳で学内向け学習 Q&A サービスを開発。2018 年よりフリーランスとして活動を開始。フロントからバックエンドまで多様な言語を扱うフルスタックエンジニア。"),(0,r.kt)("p",null,"2019 年に株式会社 kikitori に参画。"),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"Ref とは"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Ref は render メソッドで作成された DOM ノードもしくは React の要素にアクセスする方法を提供します。"),(0,r.kt)("p",{parentName:"blockquote"},"-- ",(0,r.kt)("a",{parentName:"p",href:"https://ja.reactjs.org/docs/refs-and-the-dom.html"},"https://ja.reactjs.org/docs/refs-and-the-dom.html"))),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"基本的な使い方"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useRef")," の戻り値を ",(0,r.kt)("inlineCode",{parentName:"p"},"ref")," 属性に渡すと ",(0,r.kt)("inlineCode",{parentName:"p"},"current")," フィールドに DOM オブジェクトが入る。",(0,r.kt)("a",{parentName:"p",href:"samples/sample01"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export default function Sample1() {\n  const ref = useRef<HTMLInputElement>(null);\n\n  return (\n    <>\n      <input ref={ref} />\n      <button\n        onClick={() => {\n          ref.current?.focus();\n        }}\n      >\n        focus\n      </button>\n    </>\n  );\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"Ref の歴史"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("del",{parentName:"li"},"String Refs")," (たぶん初期からある)"),(0,r.kt)("li",{parentName:"ul"},"Callback Ref (v0.13.0 / 2015 年)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"String Refs より柔軟に Ref が扱えるようになった。"))),(0,r.kt)("li",{parentName:"ul"},"Ref オブジェクト (v16.3.0 / 2018 年)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Callback Ref よりも開発者にとって使いやすいインターフェースを目指して開発された。")))),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"Class Component 時代の Ref (1)"),(0,r.kt)("p",null,"Class Component 時代の Ref: クラスコンポーネントのインスタンスを取得するための仕組み。",(0,r.kt)("a",{parentName:"p",href:"samples/sample02"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"class Child extends Component {\n  render() {\n    return <div>Hello World</div>;\n  }\n}\n\nexport default class Sample02 extends Component {\n  divRef = createRef<HTMLDivElement>();\n  divElement: HTMLDivElement | null = null;\n  childRef = createRef<Child>();\n\n  render() {\n    return (\n      <>\n        {/* Ref オブジェクトを使う場合 */}\n        <div ref={this.divRef} />\n        {/* Callback Ref を使う場合 */}\n        <div\n          ref={(element) => {\n            this.divElement = element;\n          }}\n        />\n        <Child ref={this.childRef} />\n      </>\n    );\n  }\n}\n")),(0,r.kt)("p",null,"対象が DOM 要素であれば DOM オブジェクトが、カスタムコンポーネントであればそのインスタンスが取得できる"),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"Class Component 時代の Ref (2)"),(0,r.kt)("p",null,"子コンポーネントのメソッドが呼び出せたりする。",(0,r.kt)("a",{parentName:"p",href:"samples/sample03"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"class Child extends Component<{}, { count: number }> {\n  state = { count: 1 };\n\n  increment() {\n    this.setState((state) => ({ count: state.count + 1 }));\n  }\n\n  render() {\n    return <div>{this.state.count}</div>;\n  }\n}\n\nexport default class Sample03 extends Component {\n  ref = createRef<Child>();\n\n  render() {\n    return (\n      <>\n        <Child ref={this.ref} />\n        <button\n          onClick={() => {\n            this.ref.current?.increment();\n          }}\n        >\n          increment\n        </button>\n      </>\n    );\n  }\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"Hooks 以降の Ref (1)"),(0,r.kt)("p",null,"インスタンスが存在しないため、Ref を取得できない。",(0,r.kt)("a",{parentName:"p",href:"samples/sample04"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function Child() {\n  return <div>Child</div>;\n}\n\nexport default function Sample04() {\n  const ref = useRef<any>(null);\n\n  // @ts-expect-error Property 'ref' does not exist on type 'IntrinsicAttributes'.\n  return <Child ref={ref} />;\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"Hooks 以降の Ref (2)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"forwardRef")," を使うと function component でも ref を公開できる。",(0,r.kt)("a",{parentName:"p",href:"samples/sample05"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const Child = forwardRef<HTMLInputElement>(function Child(_, ref) {\n  return <input ref={ref} />;\n});\n\nexport default function Sample05() {\n  const ref = useRef<HTMLInputElement>(null);\n\n  return (\n    <>\n      <Child ref={ref} />\n      <button\n        onClick={() => {\n          ref.current?.focus();\n        }}\n      >\n        focus\n      </button>\n    </>\n  );\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"Hooks 以降の Ref (3)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ref")," という属性名にこだわらなければ別に ",(0,r.kt)("inlineCode",{parentName:"p"},"forwardRef")," を使う必要はない。",(0,r.kt)("a",{parentName:"p",href:"samples/sample06"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function Child(props: { innerRef: Ref<HTMLInputElement> }) {\n  return <input ref={props.innerRef} />;\n}\n\nexport default function Sample06() {\n  const ref = useRef<HTMLInputElement>(null);\n\n  return (\n    <>\n      <Child innerRef={ref} />\n      <button\n        onClick={() => {\n          ref.current?.click();\n        }}\n      />\n    </>\n  );\n}\n")),(0,r.kt)("p",null,"HoC を作る時やライブラリ作成者が Class Component → Functional Component に移行する際に便利。"),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"Hooks 以降の Ref (4)"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useImperativeHandle"),"を用いることで自由な値を ref に設定できる。以下の例では、単純な関数を Ref として使用している。",(0,r.kt)("a",{parentName:"p",href:"samples/sample07"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type ChildRef = () => void;\n\nconst Child = forwardRef<ChildRef>(function Child(_, ref) {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useImperativeHandle(ref, () => () => {\n    inputRef.current?.focus();\n  });\n\n  return <input ref={inputRef} />;\n});\n\nexport default function Sample07() {\n  const ref = useRef<ChildRef>(null);\n\n  return (\n    <>\n      <Child ref={ref} />\n      <button\n        onClick={() => {\n          ref.current?.();\n        }}\n      >\n        focus\n      </button>\n    </>\n  );\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"useEffect を用いた useImperativeHandle の再実装"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"samples/sample08"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'useEffect(() => {\n  const refValue = () => {\n    inputRef.current?.focus();\n  };\n\n  // Callback Refの場合\n  if (typeof ref === "function") {\n    ref(refValue);\n    return () => {\n      ref(null);\n    };\n  }\n\n  // Ref オブジェクトの場合\n  if (ref) {\n    ref.current = refValue;\n    return () => {\n      ref.current = null;\n    };\n  }\n});\n')),(0,r.kt)("p",null,"（少なくとも）コンポーネントのマウント時とアンマウント時に親から渡された Ref の値を設定すればよい。"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"useImperativeHandle"),"を使うことで、Ref オブジェクトと Callback Ref の差異を吸収できる。"),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"Hooks 後の Ref のユースケース"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DOM にアクセスする ← 今まで扱ってきた"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Class Component のインスタンス変数の代わり"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"ミュータブル"),(0,r.kt)("li",{parentName:"ul"},"変更しても再レンダリングされない")))),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"Ref の DOM 以外のユースケース (1)"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/streamich/react-use"},"react-use"),"の",(0,r.kt)("a",{parentName:"p",href:"https://github.com/streamich/react-use/blob/master/src/useMountedState.ts"},"useMountedState")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export default function useMountedState(): () => boolean {\n  const mountedRef = useRef<boolean>(false);\n  const get = useCallback(() => mountedRef.current, []);\n\n  useEffect(() => {\n    mountedRef.current = true;\n\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []);\n\n  return get;\n}\n")),(0,r.kt)("p",null,"コンポーネントが破棄された後もアクセスする可能性があるため、Ref オブジェクトの中にマウント状態を格納している"),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"Ref の DOM 以外のユースケース (2)"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/reduxjs/react-redux"},"react-redux"),"の",(0,r.kt)("a",{parentName:"p",href:"https://github.com/reduxjs/react-redux/blob/master/src/hooks/useSelector.js"},"useSelector")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function useSelectorWithStoreAndSubscription(selector, equalityFn, store) {\n  const latestSelector = useRef();\n  const latestStoreState = useRef();\n  const latestSelectedState = useRef();\n\n  let selectedState;\n  if (\n    selector !== latestSelector.current ||\n    storeState !== latestStoreState.current\n  ) {\n    const newSelectedState = selector(storeState);\n    if (!equalityFn(newSelectedState, latestSelectedState.current))\n      selectedState = newSelectedState;\n    else selectedState = latestSelectedState.current;\n  } else {\n    selectedState = latestSelectedState.current;\n  }\n  return selectedState;\n}\n")),(0,r.kt)("p",null,"無用な再レンダリングを発生させないように、",(0,r.kt)("inlineCode",{parentName:"p"},"selector")," の結果を Ref に保存しておく。"),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"突然ですが弊社の紹介です"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(5927),alt:"nimaru"})),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(3710),alt:"kikitori"})),(0,r.kt)("p",null,"弊社 ",(0,r.kt)("a",{parentName:"p",href:"https://kikitori.jp/"},"kikitori")," は、農産物の流通現場向け SaaS「",(0,r.kt)("a",{parentName:"p",href:"https://nimaru.jp/"},"nimaru"),"」を通して、農業流通全体の DX に取り組んでいます。"),(0,r.kt)("p",null,"全国の卸売市場や JA にてご利用いただいています。"),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"業務システム開発にて"),(0,r.kt)("p",null,"弊社のプロダクトの 1 つである nimaru JA は業務システム的な側面が強い"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(5622),alt:"nimaru JAスクリーンショット"})),(0,r.kt)("p",null,"「Enter キーでカーソル移動したい」という要望が来たら？？"),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"課題"),(0,r.kt)("p",null,"Ref で複数の DOM をどう扱うか 🤔"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"なんか Ref をゴニョゴニョするライブラリがあったような"),(0,r.kt)("p",null,(0,r.kt)("img",{src:"https://raw.githubusercontent.com/react-hook-form/react-hook-form/master/docs/logo.png",alt:"React Hook Form"})),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"React Hook Form"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"register")," の戻り値には ",(0,r.kt)("inlineCode",{parentName:"p"},"Ref")," が含まれる。"),(0,r.kt)("p",null,"敢えて ",(0,r.kt)("inlineCode",{parentName:"p"},"value")," 属性を使わず ",(0,r.kt)("inlineCode",{parentName:"p"},"input")," を非制御のままにしておくことで、パフォーマンスを改善した。",(0,r.kt)("a",{parentName:"p",href:"samples/sample09"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'type FormValue = {\n  name: string;\n};\n\nexport default function Sample09() {\n  const { register, handleSubmit } = useForm<FormValue>();\n\n  return (\n    <form\n      onSubmit={handleSubmit((e) => {\n        alert(e.name);\n      })}\n    >\n      <input {...register("name")} />\n      <input type="submit" />\n    </form>\n  );\n}\n')),(0,r.kt)("p",null,"ちなみに v6 では ",(0,r.kt)("inlineCode",{parentName:"p"},"ref={register()}")," とやっていたので v7 の API では背徳感が薄くなった（？）"),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"React Hook Form の動作原理"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"register")," は ",(0,r.kt)("inlineCode",{parentName:"li"},"{ onChange(), ref }")," の形のオブジェクトを返す",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"使う側はスプレッド構文で展開するだけで使える"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ref")," は Callback Ref"),(0,r.kt)("li",{parentName:"ul"},"Callback Ref 内で",(0,r.kt)("strong",{parentName:"li"},"連想配列"),"の Ref オブジェクトに ref を保存する")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"function useForm() {\n  const ref = useRef<Record<string, HTMLInputElement>>({});\n  const register = (name: string) => ({\n    onChange() {},\n    ref(element: HTMLInputElement | null) {\n      ref.current[name] = element;\n    },\n  });\n  return { register };\n}\n")),(0,r.kt)("p",null,"この仕組みは使えそうだ！！"),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"フォーカス管理の Hook の方針"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"useRef")," の中で ",(0,r.kt)("inlineCode",{parentName:"li"},"Map<number, HTMLInputElement>")," を管理する"),(0,r.kt)("li",{parentName:"ul"},"Hook の戻り値は ",(0,r.kt)("inlineCode",{parentName:"li"},"register")," 関数で、フォーカスの順番を引数に指定すると ",(0,r.kt)("inlineCode",{parentName:"li"},"{ onKeyDown(), ref }")," なオブジェクトを返す"),(0,r.kt)("li",{parentName:"ul"},"使う側はスプレッド構文で展開するだけ")),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"結果"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"samples/sample10"},"サンプル")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'function useEnterKeyFocusControl() {\n  const ref = useRef(new Map<number, HTMLInputElement>());\n  return (index: number) => ({\n    onKeyDown({ key }: { key: string }) {\n      if (key !== "Enter") return;\n      const sortedIndices = [...ref.current.keys()].sort();\n      const nextIndex = sortedIndices[sortedIndices.indexOf(index) + 1];\n      if (typeof nextIndex === "number") ref.current.get(nextIndex)?.focus();\n    },\n    ref(element: HTMLInputElement | null) {\n      if (element) ref.current.set(index, element);\n      else ref.current.delete(index);\n    },\n  });\n}\n')),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"こんなに簡単に書けるようになりました"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export default function Sample10() {\n  const register = useEnterKeyFocusControl();\n  return (\n    <>\n      {[...Array(10).keys()].map((i) => (\n        <input key={i} {...register(i)} />\n      ))}\n    </>\n  );\n}\n")),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"まとめ"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Hooks 時代の Ref の用途",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"DOM へのアクセス"),(0,r.kt)("li",{parentName:"ul"},"ミュータブルな値を、レンダリングから独立して管理する"))),(0,r.kt)("li",{parentName:"ul"},"useRef で得られるのは Ref オブジェクトだが、Callback Ref を組み合わせて使うとより柔軟に制御できる"),(0,r.kt)("li",{parentName:"ul"},"「Callback Ref を生成する関数」を返す Custom Hook を作ると複数要素の Ref を高い抽象度で扱える")),(0,r.kt)("hr",null),(0,r.kt)("h2",null,"再び宣伝"),(0,r.kt)("p",null,"弊社 ",(0,r.kt)("a",{parentName:"p",href:"https://kikitori.jp/"},"kikitori"),"は、国内農業流通の ",(0,r.kt)("strong",{parentName:"p"},"8 割")," を占める ",(0,r.kt)("strong",{parentName:"p"},"市場流通")," の DX に取り組んでいます。"),(0,r.kt)("p",null,"私たちと日本の農業を未来をつくるプロダクトを開発しませんか？"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(4658),alt:"農業流通図"})),(0,r.kt)("div",{className:"left"},(0,r.kt)("h4",null,"技術スタック"),(0,r.kt)("h5",null,"フロントエンド"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"TypeScript"),(0,r.kt)("li",{parentName:"ul"},"React"),(0,r.kt)("li",{parentName:"ul"},"Apollo"),(0,r.kt)("li",{parentName:"ul"},"Material-UI")),(0,r.kt)("h5",null,"バックエンド"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"NestJS"),(0,r.kt)("li",{parentName:"ul"},"Apollo")),(0,r.kt)("h5",null,"インフラ"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"ECS"),(0,r.kt)("li",{parentName:"ul"},"Aurora PostgreSQL"),(0,r.kt)("li",{parentName:"ul"},"Firebase Hosting"),(0,r.kt)("li",{parentName:"ul"},"AWS CDK (IaC)"))),(0,r.kt)("hr",null),(0,r.kt)("p",null,"ありがとうございました 🙇‍♂️"))}i.isMDXComponent=!0},6873:(e,n,t)=>{"use strict";t.r(n)},4658:(e,n,t)=>{"use strict";e.exports=t.p+"9c2074b55a3f796f60dd.webp"},5622:(e,n,t)=>{"use strict";e.exports=t.p+"d1556cee662ef0d8e913.webp"},9502:(e,n,t)=>{"use strict";e.exports=t.p+"3a831571502b4616f10d.webp"},3710:(e,n,t)=>{"use strict";e.exports=t.p+"ea5447c45dd6b1d657ee.svg"},5927:(e,n,t)=>{"use strict";e.exports=t.p+"cbc0a06e8a9246186097.svg"},1189:(e,n,t)=>{var l={"./0-slide.md":2953};function r(e){var n=a(e);return t(n)}function a(e){if(!t.o(l,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return l[e]}r.keys=function(){return Object.keys(l)},r.resolve=a,e.exports=r,r.id=1189}},e=>{"use strict";e.O(0,[179],(()=>[901,921,626].map(e.E)),5);var n=n=>e(e.s=n);e.O(0,[736],(()=>(n(7751),n(6905),n(9969))));e.O()}]);